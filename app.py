# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui

# Load libraries
import sys
import numpy as np
import pandas as pd
import inflection
import re
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import shiny
from shiny import reactive
from shiny.express import render, ui
from shinywidgets import output_widget, render_widget
import plotly.tools as tls
import plotly.express as px


# Import and wrangle data
root = '/Users/keithpost/Documents/Python/Python projects/power_dash_py/'
df = pd.read_pickle(root + 'data/openipf-2024-10-12_filtered_wrangled')
#successful lifts only
df = df[df['mass_kg']>0]


# Add 'code' folder to Python path
sys.path.append('./code')



# Import functions
from _00_power_fns import make_hist_shiny, make_scatter_shiny, make_boxplot_shiny

# ========================================================================




def server(input: Inputs, output: Outputs, session: Session) -> None:
    @render.text
    def min_text_output():
      df_lift = df[(df['lift']==exact_lift()) & (df['mass_kg']>0)]
      min_lift = df_lift['mass_kg'].min() 
      return str(min_lift) + " kg"

    # ========================================================================

    @render.text
    def max_text_output():
      df_lift = df[df['lift']==exact_lift()]
      max_lift = df_lift['mass_kg'].max() 
      return str(max_lift) + " kg"

    # ========================================================================

    #select lift
    ui.input_select(id="lift_type", label="Select lift type",
                    choices=["bench", "deadlift", "squat"],
                    selected="bench")
                
    #add line break
    ui.br()

    #select number or best
    ui.input_select(id="lift_num", label="Choose lift number",
                    choices=["1", "2", "3", "best"],
                    selected="best")
                
    @reactive.calc
    def exact_lift():
      shiny.req(input.lift_num())
      shiny.req(input.lift_type())
  
      #handle case where input.lift_num() might be None or empty
      lift_num = input.lift_num()
      lift_type = input.lift_type()
  
      if not lift_num or not lift_type: #if either is empty/None, return empty string or error msg
        return "Invalid input"
  
      if lift_num != "best":
        str_lift = lift_type + lift_num
      elif lift_num == "best":
        str_lift = "best3_" + lift_type
  
      # if input.lift_num()!="best":
      #   str_lift = lift_type +
      #   str_lift = input.lift_type() + input.lift_num()
      # elif input.lift_num()=="best":
      #   str_lift = "best3_" + input.lift_type()
      return str_lift


    # ========================================================================

    @render_widget
    def power_hist():
      plotly_hist_lift = make_hist_shiny(df, var='mass_kg', lift=exact_lift(), col='darkorange')
      return plotly_hist_lift

    # ========================================================================

    @render_widget
    def power_scatter_wilks():
      plotly_scatter_lift_wilks = make_scatter_shiny(df=df, liftx=exact_lift(), vary='wilks', pt_col="darkred", line_col="purple")
      return plotly_scatter_lift_wilks

    # ========================================================================

    @render_widget
    def power_box_equip():
      plotly_box_lift_equipment = make_boxplot_shiny(df=df, varx='equipment', lifty=exact_lift(),
                                                     col='darkgreen')
      return plotly_box_lift_equipment

    # ========================================================================

    @render_widget
    def power_scatter_age():
      plotly_scatter_age_lift = make_scatter_shiny(df=df, varx='age', lifty=exact_lift())
      return plotly_scatter_age_lift

    # ========================================================================



    return None


_static_assets = ["_02_power_dash_files","_02_power_dash_files/libs/quarto-html/tippy.css","_02_power_dash_files/libs/quarto-html/quarto-syntax-highlighting.css","_02_power_dash_files/libs/bootstrap/bootstrap-icons.css","_02_power_dash_files/libs/bootstrap/bootstrap.min.css","_02_power_dash_files/libs/quarto-dashboard/datatables.min.css","_02_power_dash_files/libs/clipboard/clipboard.min.js","_02_power_dash_files/libs/quarto-html/quarto.js","_02_power_dash_files/libs/quarto-html/popper.min.js","_02_power_dash_files/libs/quarto-html/tippy.umd.min.js","_02_power_dash_files/libs/quarto-html/anchor.min.js","_02_power_dash_files/libs/bootstrap/bootstrap.min.js","_02_power_dash_files/libs/quarto-dashboard/quarto-dashboard.js","_02_power_dash_files/libs/quarto-dashboard/stickythead.js","_02_power_dash_files/libs/quarto-dashboard/datatables.min.js","_02_power_dash_files/libs/quarto-dashboard/pdfmake.min.js","_02_power_dash_files/libs/quarto-dashboard/vfs_fonts.js","_02_power_dash_files/libs/quarto-dashboard/web-components.js","_02_power_dash_files/libs/quarto-dashboard/components.js"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "_02_power_dash.html",
    server,
    static_assets=_static_assets,
)
