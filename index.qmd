---
title: "Powerlifting Dashboard"
subtitle: "(male, tested, sanctioned, IPF, 105 kg weight class, US meets only from 2021-4)"
author: "**Keith Post**"
format: 
  dashboard:
    orientation: columns
server: shiny
project:
  type: website
  output-dir: docs
---

```{python setup import}
#| context: setup

# Load libraries
import sys
import numpy as np
import pandas as pd
import inflection
import re
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import shiny
from shiny import reactive
from shiny.express import render, ui
from shinywidgets import output_widget, render_widget
import plotly.tools as tls
import plotly.express as px


# Import and wrangle data
root = '/Users/keithpost/Documents/Python/Python projects/powerlifting_dash_py/'
df = pd.read_pickle(root + 'data/openipf-2024-10-12_filtered_wrangled')
#successful lifts only
df = df[df['mass_kg']>0]


# Add 'code' folder to Python path
sys.path.append('./code')



# Import functions
from _00_power_fns import make_hist_shiny, make_scatter_shiny, make_boxplot_shiny

```


## Column {width=12%}

```{python min}
#| content: valuebox
#| title: "Minimum" 
#| icon: weight
#| color: primary

@render.text
def min_text_output():
  df_lift = df[(df['lift']==exact_lift()) & (df['mass_kg']>0)]
  min_lift = df_lift['mass_kg'].min() 
  return str(min_lift) + " kg"

```

```{python max}
#| content: valuebox
#| title: "Maximum" 
#| icon: weight
#| color: primary

@render.text
def max_text_output():
  df_lift = df[df['lift']==exact_lift()]
  max_lift = df_lift['mass_kg'].max() 
  return str(max_lift) + " kg"

```


```{python ui and reactives}

#select lift
ui.input_select(id="lift_type", label="Select lift type",
                choices=["bench", "deadlift", "squat"])
                
#add line break
ui.br()

#select number or best
ui.input_select(id="lift_num", label="Choose lift number",
                choices=["1", "2", "3", "best"])
                
@reactive.calc
def exact_lift():
  if input.lift_num()!="best":
    str_lift = input.lift_type() + input.lift_num()
  else:
    str_lift = "best3_" + input.lift_type()
  return str_lift
                
```


## Column {width=44%}

```{python histogram}
#| title: Histogram of Lift Results
  
@render_widget
def power_hist():
  plotly_hist_lift = make_hist_shiny(df, var='mass_kg', lift=exact_lift(), col='darkorange')
  return plotly_hist_lift

```


```{python scatterplot with wilks}
#| title: Wilks Score by Lift Results

@render_widget
def power_scatter_wilks():
  plotly_scatter_lift_wilks = make_scatter_shiny(df=df, liftx=exact_lift(), vary='wilks', pt_col="darkred", line_col="purple")
  return plotly_scatter_lift_wilks

```


## Column {width=44%}

```{python boxplot with equipment}
#| title: Lift Results by Equipment

@render_widget
def power_box_equip():
  plotly_box_lift_equipment = make_boxplot_shiny(df=df, varx='equipment', lifty=exact_lift(),
                                                 col='darkgreen')
  return plotly_box_lift_equipment

```


```{python scatterplot with age}
#| title: Lift Results by Age

@render_widget
def power_scatter_age():
  plotly_scatter_age_lift = make_scatter_shiny(df=df, varx='age', lifty=exact_lift())
  return plotly_scatter_age_lift

```


